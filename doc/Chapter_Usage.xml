<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Usage">
<Heading>Usage</Heading>

<Section Label="Chapter_Usage_Section_Available_functions">
<Heading>Available functions</Heading>

In this section we shall look at the functions provided by qsopt_ex-interface. <Math>\texttt{qsopt}\_\texttt{ex-interface}</Math> allows
GAP to communicate with external LP solver process via a stream object of category IsInputOutputStream(). This stream serves as a
handle via which one can load/solve/modify linear programs. Note that it is possible to maintain several such steams (and hence LPs)
at any given time. However, the gap commands to solve/modify these LPs that are currently available in this package are blocking functions.
<ManSection>
  <Func Arg="obj,A,b,linrows,qs_exec,optargs" Name="LoadQSLP" />
 <Returns>A list
</Returns>
 <Description>
This function loads an LP by invoking external qsopt-exact LP solver process.
It accepts following arguments:
<List>
<Item>
<Math>obj</Math> - Objective function coefficients, provided as a list
</Item>
<Item>
<Math>A</Math> - A list of lists corresponding to constraints
</Item>
<Item>
<Math>b</Math> - Right hand side of constraints
</Item>
<Item>
<Math>linrows</Math> - A list of indices of members of <Math>A</Math> that are equalities
</Item>
<Item>
<Math>qs\_exec</Math> - A string describing complete path to 'qsi' executable (including 'qsi')
</Item>
</List>
Returns a list <Math>[s,rval]</Math> where 's' is a gap object of category IsInputOutputStream() and 'rval'
<Math>=1/-1</Math> indicates success/failure. If 'rval=1', 's' is ready to be be used to solve linear programs.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,obj" Name="LoadQSLPobj" />
 <Returns>An integer
</Returns>
 <Description>
This function loads a new objective.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>obj</Math> - Objective function coefficients, provided as a list
</Item>
</List>
Returns an integer 'rval' <Math>=1/-1</Math> that indicate success/failure. If 'rval=1',
the LP associated with 's' is successfully modified.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,optargs" Name="SolveQSLP" />
 <Returns>An integer
</Returns>
 <Description>
This function solves an LP by invoking external qsopt-exact LP solver process.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>optargs</Math> - A list of optional arguments. Currently supports only one optional argument, which is an integer
specifying simplex variant to use: <Math>optargs=[1]</Math> for primal simplex, <Math>optargs=[2]</Math> for dual simplex and <Math>optargs=[3]</Math> for either
</Item>
</List>
Returns an integer <Math>status</Math> that is the integer returned by <Math>\texttt{mpq}\_\texttt{QSget}\_\texttt{status}()</Math> function.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="FlushQSLP" />
 <Returns></Returns>
 <Description>
This function terminates the external processes associated with given LP handle.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
</List>
Returns Nothing
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="GetQSLPsol_primal" />
 <Returns>A list
</Returns>
 <Description>
This function obtains the primal solution along with the associated vertex vertex, for the most recently solved LP.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
</List>
Returns A list <Math>[status,val\_rval,val,x\_rval,x]</Math> if optimal solution exists and a list <Math>[status]</Math> otherwise. If <Math>status=1</Math>,
<Math>val\_rval</Math> and <Math>x\_rval</Math> indicate validity of <Math>val</Math> and <Math>x</Math> (valid if <Math>1</Math> and invalid if <Math>-1</Math>) which are optimal solution
and (primal) vertex achieving optimal solution respectively. Other status values correspond to the integer returned by <Math>\texttt{mpq}\_\texttt{QSget}\_\texttt{status}()</Math> function.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="GetQSLPsol_dual" />
 <Returns>A list
</Returns>
 <Description>
This function obtains the primal solution along with the associated vertex vertex, for the most recently solved LP.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
</List>
Returns A list <Math>[status,val\_rval,val,y\_rval,y]</Math> if optimal solution exists and a list <Math>[status]</Math> otherwise. If <Math>status=1</Math>,
<Math>val\_rval</Math> and <Math>x\_rval</Math> indicate validity of <Math>val</Math> and <Math>x</Math> (valid if <Math>1</Math> and invalid if <Math>-1</Math>) which are optimal solution
and (dual) vertex achieving optimal solution respectively. Other status values correspond to the integer returned by <Math>\texttt{mpq}\_\texttt{QSget}\_\texttt{status}()</Math> function.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,row,coef" Name="ChangeQSrhs" />
 <Returns>An integer
</Returns>
 <Description>
This function changes the value of single rhs coefficient in specified row.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>row</Math> - row index of the inequility whose rhs is to be changed
</Item>
<Item>
<Math>coef</Math> - new rhs coefficient
</Item>
</List>
Returns A an integer which is itself returned by QSopt<Math>\_</Math>ex function <Math>\texttt{mpq}\_\texttt{QSchange}\_\texttt{rhscoef}</Math>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,row" Name="DelQSrow" />
 <Returns>An integer
</Returns>
 <Description>
This function deletes the specified row. (Note that for repeated use, one must
relabel rows as QSopt<Math>\_</Math>ex would treat eg. the second row as first row if we delete the first row)
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>row</Math> - row index of the inequility whose rhs is to be changed
</Item>
</List>
Returns A an integer which is itself returned by QSopt<Math>\_</Math>ex function <Math>\texttt{mpq}\_\texttt{QSchange}\_\texttt{rhscoef}</Math>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,row,coef" Name="ChangeQSsense" />
 <Returns>An integer
</Returns>
 <Description>
This function changes the sense (equality or inequality) of a particular row.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>row</Math> - row index of the inequility whose sense is to be changed
</Item>
<Item>
<Math>newsense</Math> - A single character string describing the new sense, "L" for <Math>\leq</Math> and "E" for <Math>=</Math>
</Item>
</List>
Returns An integer which is itself returned by QSopt<Math>\_</Math>ex function <Math>\texttt{mpq}\_\texttt{QSchange}\_\texttt{sense}</Math>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s,row,coef" Name="ChangeQScoef" />
 <Returns>An integer
</Returns>
 <Description>
This function changes a particular coefficient in the constraint matrix.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
<Item>
<Math>row</Math> - row index of the inequility to which the coefficient to be changed belongs
</Item>
<Item>
<Math>col</Math> - column index of the inequility whose sense is to be changed
</Item>
<Item>
<Math>coef</Math> - A rational number or an integer
</Item>
</List>
Returns A an integer which is itself returned by QSopt<Math>\_</Math>ex function <Math>\texttt{mpq}\_\texttt{QSchange}\_\texttt{sense}</Math>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="DisplayLPQS" />
 <Returns>Nothing
</Returns>
 <Description>
This function displays an already loaded LP.
It accepts following arguments:
<List>
<Item>
<Math>s</Math> - gap object of category IsInputOutputStream(), handle to an already loaded LP
</Item>
</List>
Returns Nothing
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Usage_Section_Example">
<Heading>Example</Heading>

Following example explains the standard workflow with qsopt <Math>\texttt{qsopt}\_\texttt{ex-interface}</Math>. We show
how to load, solve, display and modify a linear program.
<Example><![CDATA[
gap> #  absolute path to the interface executable
> qs_exec:="/home/aspitrg3-users/jayant/qsopt_interface/dummy";;
gap> # Construt a 3-D cube
> A:=[[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]];;
gap> b:=[1,1,1,0,0,0];;
gap> rlist:=LoadQSLP([1,1,1],A,b,[],qs_exec);;
gap> rlist[1]; # stdin/stdout handle to the loaded LP
< input/output stream to dummy >
gap> s:=rlist[1];;
gap> DisplayLPQS(s);
Problem
 prob
Maximize
 obj:   c0 +  c1 +  c2
Subject To
 r0:   c0 <= 1
 r1:   c1 <= 1
 r2:   c2 <= 1
 r3:  -  c0 <= 0
 r4:  -  c1 <= 0
 r5:  -  c2 <= 0
Bounds
 c0 free
 c1 free
 c2 free
End
gap> SolveQSLP(s,[]); # returns status, 1 for success
1
gap> rlist:=GetQSLPsol_primal(s);; # get primal solution
gap> rlist[1]; # return status
1
gap> rlist[2]; # val_rval, 0 means sane
0
gap> rlist[3]; # val, LP solution
3
gap> rlist[4]; # x_rval, 0 means sane
0
gap> rlist[5]; # x, optimum vertex
[ 1, 1, 1 ]
gap> rlist:=GetQSLPsol_dual(s);;  #  get dual solution
gap> rlist[1]; # status
1
gap> rlist[2]; # val_rval
0
gap> rlist[3]; # val
3
gap> rlist[4]; # y_rval
0
gap> rlist[5]; # y
[ 1, 1, 1, 0, 0, 0 ]
gap> LoadQSLPobj(s,[-1,-1,-1]); # to minimize, negate the objective
1
gap> SolveQSLP(s,[]); # returns status, 1 for success
1
gap> rlist:=GetQSLPsol_primal(s);  #  get primal solution
[ 1, 0, 0, 0, [ 0, 0, 0 ] ]
gap> ChangeQSsense(s,1,"E"); # tighten first inequality (r0)
0
gap> DisplayLPQS(s);
Problem
prob
Maximize
 obj:  -  c0 -  c1 -  c2
Subject To
 r0:   c0 = 1
 r1:   c1 <= 1
 r2:   c2 <= 1
 r3:  -  c0 <= 0
 r4:  -  c1 <= 0
 r5:  -  c2 <= 0
Bounds
 c0 free
 c1 free
 c2 free
End
gap> ChangeQSrhs(s,1,3/2); # change first row r0's rhs to 3/2
0
gap> DisplayLPQS(s);
Problem
prob
Maximize
obj:  -  c0 -  c1 -  c2
Subject To
 r0:   c0 = 3/2
 r1:   c1 <= 1
 r2:   c2 <= 1
 r3:  -  c0 <= 0
 r4:  -  c1 <= 0
 r5:  -  c2 <= 0
Bounds
 c0 free
 c1 free
 c2 free
End
gap> SolveQSLP(s,[]); # returns status, 1 for success
1
gap> rlist:=GetQSLPsol_primal(s);  #  get primal solution
[ 1, 0, -3/2, 0, [ 3/2, 0, 0 ] ]
gap> DelQSrow(s,1); # delete the first row
0
gap> DisplayLPQS(s);
Problem
prob
Maximize
 obj:  -  c0 -  c1 -  c2
Subject To
 r1:   c1 <= 1
 r2:   c2 <= 1
 r3:  -  c0 <= 0
 r4:  -  c1 <= 0
 r5:  -  c2 <= 0
Bounds
 c0 free
 c1 free
 c2 free
End
]]></Example>


</Section>


</Chapter>

